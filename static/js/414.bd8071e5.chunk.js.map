{"version":3,"file":"static/js/414.bd8071e5.chunk.js","mappings":"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","sources":["../node_modules/@babel/standalone|sync","../../README.md","preset.js","App.js","bootstrap.js"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 5764;\nmodule.exports = webpackEmptyContext;","import * as component_1 from '@kne/current-lib_speech-text';\nimport * as component_2 from 'antd';\nimport * as component_3 from 'axios';\nconst readmeConfig = {\n    name: `speech-text`,\n    summary: `<h1>speech-text</h1>\n<h3>安装</h3>\n<pre><code class=\"language-shell\">npm i --save @kne-components/speech-text\n</code></pre>`,\n    \n    packageName: `@kne-components/speech-text`,\n    api: `<h4>默认导出 speech(options):Promise</h4>\n<p>上传语音文件识别</p>\n<p>example:</p>\n<pre><code class=\"language-javascript\">const {start, stop} = await speech(options);\n</code></pre>\n<h4>options:Object</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>上传文件语音识别目标接口地址</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>开始录音 start():Promise</h4>\n<p>example:</p>\n<pre><code class=\"language-javascript\">await start();\n</code></pre>\n<h4>结束录音 stop():Promise</h4>\n<p>example:</p>\n<pre><code class=\"language-javascript\">const response = await stop();\nconst {code, message} = response.data;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>code</td>\n<td>后端接口返回状态值,200为成功</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>message</td>\n<td>语音转换结果</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>speechTextRealTime(options):Promise</h3>\n<p>实时语音识别</p>\n<p>example:</p>\n<pre><code class=\"language-javascript\">const {start, stop} = await speechTextRealTime(options);\n</code></pre>\n<h4>options:Object</h4>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getToken</td>\n<td>获取Token方法:getToken():{token,appKey}</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>识别文本内容发生变化时回调函数</td>\n<td>function</td>\n<td>({message}) =&gt; {console.log(message);}</td>\n</tr>\n<tr>\n<td>getGatewayUrl</td>\n<td>获取WebSocket的url地址: getGatewayUrl({token}):url,可以获取到token参数</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onComplete</td>\n<td>录音结束回调方法</td>\n<td>function</td>\n<td>-</td>\n</tr>\n<tr>\n<td>url</td>\n<td>保存录音文件url</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>开始录音 start():Promise</h4>\n<p>example:</p>\n<pre><code class=\"language-javascript\">await start({\n    getToken: () =&gt; {\n    },\n    onChange: ({message}) =&gt; {\n    },\n    onComplete: ({file, taskId, messageId, message, chunks}) =&gt; {\n    }\n});\n</code></pre>\n<h4>结束录音 stop():Promise</h4>\n<p>example:</p>\n<pre><code class=\"language-javascript\">await stop();\n</code></pre>`,\n    example: {\n        isFull: true,\n        className: `speech_text_e4cb6`,\n        style: `.speech_text_e4cb6 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `录音文件上传识别`,\n    description: `录音文件上传识别`,\n    code: `const {default: speech} = _SpeechText;\nconst {Button, Alert, Flex} = antd;\nconst {useState, useEffect, useRef} = React;\n\nconst BaseExample = () => {\n    const [message, setMessage] = useState({type: 'info', message: '尚未开始'});\n    const [recording, setRecording] = useState(false);\n    const recordRef = useRef(null);\n    useEffect(() => {\n        recordRef.current = speech({url: 'https://ct.deeperagi.com/action/papi/ai/vCMA01/uploadWavFile'});\n    }, []);\n    return <Flex vertical gap={10}>\n        <Alert type={message.type} message={message.message}/>\n        <div>\n            <Button onClick={() => {\n                recordRef.current.then(async ({start, stop}) => {\n                    setMessage({type: 'warning', message: '正在识别，请稍等'});\n                    if (recording) {\n                        const {data} = await stop();\n                        if (data.code === 200) {\n                            setMessage({type: 'success', message: data.message || '未识别到语音内容'});\n                        } else {\n                            setMessage({type: 'error', message: '转换错误'});\n                        }\n                    } else {\n                        setMessage({type: 'warning', message: '开始语音识别'});\n                        start();\n                    }\n                    setRecording(!recording);\n                });\n            }}>{recording ? '正在录制' : '点击开始'}</Button>\n        </div>\n    </Flex>;\n};\n\nrender(<BaseExample/>);\n\n`,\n    scope: [{\n    name: \"_SpeechText\",\n    packageName: \"@kne/current-lib_speech-text\",\n    importStatement: \"import * as _SpeechText from \\\"@kne-components/speech-text\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n},{\n    title: `实时语音识别`,\n    description: `实时语音识别`,\n    code: `const {speechTextRealTime} = _SpeechText;\nconst {Button, Alert, Flex} = antd;\nconst {default: axios} = _axios;\nconst {useState, useEffect, useRef} = React;\n\nconst BaseExample = () => {\n    const [message, setMessage] = useState({type: 'info', message: '尚未开始'});\n    const [recording, setRecording] = useState(false);\n    const recordRef = useRef(null);\n    useEffect(() => {\n        recordRef.current = speechTextRealTime({\n            getToken: async () => {\n                try {\n                    const {data} = await axios({\n                        url: 'https://ct.deeperagi.com/action/papi/ai/vCMA02/createToken',\n                        method: 'POST',\n                        data: JSON.stringify({\n                            \"avgtype\": \"11111\"\n                        }),\n                        headers: {\n                            'content-type': 'application/json'\n                        }\n                    });\n                    return {\n                        token: data.token, appKey: data.appKey\n                    };\n                } catch (e) {\n                    return {\n                        \"appKey\": \"TYcsiL5CZb9hd9DR\", \"token\": \"e80b7d7f6f054f91a79a14a67cb7f34c\"\n                    };\n                }\n            }, onChange: ({message}) => {\n                setMessage({type: 'success', message});\n            }\n        });\n    }, []);\n\n    return <Flex vertical gap={10}>\n        <Alert type={message.type} message={message.message}/>\n        <div>\n            <Button onClick={() => {\n                recordRef.current.then(async ({start, stop}) => {\n                    setMessage({type: 'warning', message: '正在识别，请稍等'});\n                    if (recording) {\n                        await stop();\n                        setMessage({type: 'info', message: '识别结束'});\n                    } else {\n                        setMessage({type: 'warning', message: '开始语音识别'});\n                        start();\n                    }\n                    setRecording(!recording);\n                });\n            }}>{recording ? '正在录制' : '点击开始'}</Button>\n        </div>\n    </Flex>;\n};\n\nrender(<BaseExample/>);\n\n`,\n    scope: [{\n    name: \"_SpeechText\",\n    packageName: \"@kne/current-lib_speech-text\",\n    importStatement: \"import * as _SpeechText from \\\"@kne-components/speech-text\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n},{\n    name: \"_axios\",\n    packageName: \"axios\",\n    component: component_3\n}]\n}]\n    }\n};\nexport default readmeConfig;\n","import React from 'react';\nimport {preset as fetchPreset} from '@kne/react-fetch';\nimport {Spin, Empty, message} from 'antd';\nimport axios from 'axios';\nimport {preset as remoteLoaderPreset} from '@kne/remote-loader';\nimport omit from 'lodash/omit';\n\nwindow.PUBLIC_URL = process.env.PUBLIC_URL;\n\nconst componentsCoreRemote = {\n    remote: \"components-core\",\n    url: \"https://registry.npmmirror.com\",\n    tpl: \"{{url}}/@kne-components%2f{{remote}}/{{version}}/files/build\",\n    defaultVersion: '0.1.10',\n};\n\nremoteLoaderPreset({\n    remotes: {\n        default: componentsCoreRemote, 'components-core': componentsCoreRemote, 'components-iconfont': {\n            remote: \"components-iconfont\",\n            url: \"https://registry.npmmirror.com\",\n            tpl: \"{{url}}/@kne-components%2f{{remote}}/{{version}}/files/build\",\n            defaultVersion: '0.1.3',\n        }\n    }\n});\n\nexport const ajax = (() => {\n    const instance = axios.create({\n        validateStatus: function () {\n            return true;\n        }\n    });\n\n    return (params) => {\n        if (params.hasOwnProperty('loader') && typeof params.loader === 'function') {\n            return Promise.resolve(params.loader(omit(params, ['loader']))).then((data) => ({\n                data: {\n                    code: 0, data\n                }\n            })).catch((err) => {\n                message.error(err.message || '请求发生错误');\n                return {data: {code: 500, msg: err.message}};\n            });\n        }\n        return instance(params);\n    };\n})();\n\n\nfetchPreset({\n    ajax,\n    loading: <Spin delay={500}\n                   style={{position: 'absolute', left: '50%', padding: '10px', transform: 'translateX(-50%)'}}/>,\n    error: null,\n    empty: <Empty/>,\n    transformResponse: (response) => {\n        const {data} = response;\n        response.data = {\n            code: data.code === 0 ? 200 : data.code, msg: data.msg, results: data.data\n        };\n        return response;\n    }\n});\n","import { HashRouter } from \"react-router-dom\";\nimport createEntry from \"@kne/modules-dev/dist/create-entry\";\nimport \"@kne/modules-dev/dist/create-entry.css\";\nimport readme from \"readme\";\n\nconst ExampleRoutes = createEntry.ExampleRoutes;\n\nconst App = ({ preset, themeToken, ...props }) => {\n  return (\n      <HashRouter>\n        <ExampleRoutes\n            {...props}\n            paths={[\n              {\n                key: \"components\",\n                path: \"/\",\n                title: \"首页\",\n              },\n            ]}\n            preset={preset}\n            themeToken={themeToken}\n            readme={readme}\n            pageProps={{ menu: null }}\n        />\n      </HashRouter>\n  );\n};\n\nexport default App;\n","import { ajax } from \"./preset\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nconst themeToken = {\n  colorPrimary: \"#4F185A\",\n};\n\nroot.render(\n    <React.StrictMode>\n      <App preset={{ ajax }} themeToken={themeToken} />\n    </React.StrictMode>\n);\n"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","id","module","exports","name","summary","packageName","api","example","isFull","className","style","list","title","description","scope","importStatement","component","window","PUBLIC_URL","process","componentsCoreRemote","remote","url","tpl","defaultVersion","remoteLoaderPreset","remotes","default","ajax","instance","axios","validateStatus","params","hasOwnProperty","loader","Promise","omit","then","data","catch","err","message","error","msg","fetchPreset","loading","_jsx","Spin","delay","position","left","padding","transform","empty","Empty","transformResponse","response","results","ExampleRoutes","createEntry","_ref","preset","themeToken","props","HashRouter","children","paths","key","path","readme","pageProps","menu","ReactDOM","document","getElementById","render","React","App","colorPrimary"],"sourceRoot":""}