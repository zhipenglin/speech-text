{"version":3,"file":"static/js/830.5348866c.chunk.js","mappings":"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","sources":["../../src/record.js","../../src/realtime.js"],"sourcesContent":["import axios from 'axios';\nimport Recorder from 'recorder-core';\nimport 'recorder-core/recorder.wav.min';\n\nconst record = async (options) => {\n    const {url, sampleRate, bitRate, options: requestOptions, onComplete} = Object.assign({\n        sampleRate: 16000, bitRate: 16\n    }, {}, options);\n    const rec = Recorder({\n        type: \"wav\", sampleRate, bitRate\n    });\n    return {\n        start: async () => {\n            await new Promise((resolve, reject) => {\n                rec.open(resolve, reject);\n            });\n            rec.start();\n            return {record: rec};\n        }, stop: async () => {\n            const file = await new Promise((resolve, reject) => {\n                rec.stop((blob) => {\n                    resolve(new File([blob], 'audio.wav', {type: 'audio/wav'}));\n                }, reject);\n            });\n            rec.close();\n            onComplete && onComplete({file});\n            return url && await axios.postForm(url, {file}, requestOptions);\n        }\n    };\n};\n\nexport default record;\n","import axios from 'axios';\nimport {v4 as uuidv4} from 'uuid';\n\nconst getUUId = () => {\n    return uuidv4().replace(/-/g, '');\n};\n\nconst realtime = async (options) => {\n    const {\n        url, options: requestOptions, getToken, getGatewayUrl, sampleRate, onChange, onComplete\n    } = Object.assign({}, {\n        getGatewayUrl: ({token}) => `wss://nls-gateway-cn-shanghai.aliyuncs.com/ws/v1?token=${token}`,\n        onChange: ({message}) => {\n            console.log(message);\n        },\n        sampleRate: 16000\n    }, options);\n    const taskId = getUUId();\n    let context = null;\n    return {\n        start: async () => {\n            const {token, appKey} = await getToken();\n            const messageId = getUUId();\n            const ws = new WebSocket(getGatewayUrl({token}));\n            const resultChunks = [];\n            const chunks = [];\n            let message = '';\n            await new Promise((resolve) => {\n                ws.addEventListener('open', () => {\n                    console.log('socket链接成功');\n                    ws.send(JSON.stringify({\n                        'header': {\n                            'message_id': messageId,\n                            'task_id': taskId,\n                            'namespace': 'SpeechTranscriber',\n                            'name': 'StartTranscription',\n                            'appkey': appKey\n                        }, 'payload': {\n                            'format': 'pcm',\n                            'sample_rate': 16000,\n                            'max_sentence_silence': 200,\n                            'enable_intermediate_result': true,\n                            'enable_punctuation_prediction': true,\n                            'enable_inverse_text_normalization': true\n                        }\n                    }));\n                });\n                ws.addEventListener('message', (e) => {\n                    const data = JSON.parse(e.data);\n                    if (data.header.name === 'TranscriptionStarted') {\n                        resolve();\n                    }\n                    if (data.header.name === 'TranscriptionResultChanged' || data.header.name === 'SentenceEnd') {\n                        Object.assign(resultChunks, {[data.payload.index]: data.payload.result});\n                        message = Object.keys(resultChunks).sort((a, b) => a - b).map((index) => resultChunks[index]).join('');\n                        onChange && onChange({\n                            payload: data.payload, chunks: resultChunks, message\n                        });\n                    }\n                });\n            });\n            const stream = await window.navigator.mediaDevices.getUserMedia({audio: true}).catch((e) => {\n                alert('获取麦克风权限失败，请刷新后重试');\n                throw e;\n            });\n            const recorder = new window.MediaRecorder(stream);\n            recorder.start(1000);\n\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)({\n                sampleRate\n            });\n            const audioInput = audioContext.createMediaStreamSource(stream);\n            const scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n            scriptProcessor.onaudioprocess = function (event) {\n                const inputData = event.inputBuffer.getChannelData(0);\n                const inputData16 = new Int16Array(inputData.length);\n                for (let i = 0; i < inputData.length; ++i) {\n                    inputData16[i] = Math.max(-1, Math.min(1, inputData[i])) * 0x7FFF; // PCM 16-bit\n                }\n                ws.send(inputData16.buffer);\n            };\n            audioInput.connect(scriptProcessor);\n            scriptProcessor.connect(audioContext.destination);\n            const dataHandler = (e) => {\n                chunks.push(e.data);\n            };\n            recorder.addEventListener('dataavailable', dataHandler);\n            context = {\n                ws,\n                stream,\n                taskId,\n                messageId,\n                scriptProcessor,\n                audioInput,\n                audioContext,\n                appKey,\n                resultChunks,\n                chunks,\n                message,\n                destroy: () => {\n                    ws.send(JSON.stringify({\n                        'header': {\n                            'message_id': messageId,\n                            'task_id': taskId,\n                            'namespace': 'SpeechTranscriber',\n                            'name': 'StopTranscription',\n                            'appkey': appKey\n                        }\n                    }));\n                    recorder.removeEventListener('dataavailable', dataHandler);\n                    ws.close();\n                    scriptProcessor.disconnect();\n                    audioInput.disconnect();\n                    audioContext.close();\n                    const tracks = stream.getTracks && stream.getTracks() || stream.audioTracks || [];\n                    tracks.forEach((track) => {\n                        track.stop && track.stop();\n                    });\n                    stream.stop && stream.stop();\n                }\n            };\n            return context;\n        }, stop: async () => {\n            if (!context) {\n                return;\n            }\n            const {taskId, messageId, chunks, destroy, message} = context;\n            const file = await new Promise((resolve, reject) => {\n                const file = new File(chunks, `${taskId}.wav`, {type: 'audio/wav'});\n                onComplete && onComplete({file, taskId, messageId, message, chunks});\n                destroy();\n                context = null;\n                resolve(file);\n            });\n            return url && await axios.postForm(url, {file}, requestOptions);\n        }\n    };\n};\n\nexport default realtime;\n"],"names":["record","async","url","sampleRate","bitRate","options","requestOptions","onComplete","Object","assign","rec","Recorder","type","start","Promise","resolve","reject","open","stop","file","blob","File","close","axios","getUUId","v4","replace","realtime","getToken","getGatewayUrl","onChange","_ref","token","_ref2","message","console","log","taskId","context","appKey","messageId","ws","WebSocket","resultChunks","chunks","addEventListener","send","JSON","stringify","e","data","parse","header","name","payload","index","result","keys","sort","a","b","map","join","stream","window","navigator","mediaDevices","getUserMedia","audio","catch","alert","recorder","MediaRecorder","audioContext","AudioContext","webkitAudioContext","audioInput","createMediaStreamSource","scriptProcessor","createScriptProcessor","onaudioprocess","event","inputData","inputBuffer","getChannelData","inputData16","Int16Array","length","i","Math","max","min","buffer","connect","destination","dataHandler","push","destroy","removeEventListener","disconnect","getTracks","audioTracks","forEach","track"],"sourceRoot":""}